{
  "version": 3,
  "sources": ["<stdin>", "../../node_modules/@remix-run/dev/compiler/shims/react.ts", "../../app/entry.server.tsx", "route-module:/Users/davincho/code/tr-jukebox/app/root.tsx", "route-module:/Users/davincho/code/tr-jukebox/app/routes/index.tsx", "../../sounds.ts", "../../app/components/JukeBox.tsx", "../../app/components/SoundButton.tsx"],
  "sourcesContent": ["\nimport * as entryServer from \"/Users/davincho/code/tr-jukebox/app/entry.server.tsx\";\nimport * as route0 from \"/Users/davincho/code/tr-jukebox/app/root.tsx\";\nimport * as route1 from \"/Users/davincho/code/tr-jukebox/app/routes/index.tsx\";\nexport { default as assets } from \"./assets.json\";\nexport const entry = { module: entryServer };\nexport const routes = {\n  \"root\": {\n    id: \"root\",\n    parentId: undefined,\n    path: \"\",\n    index: undefined,\n    caseSensitive: undefined,\n    module: route0\n  },\n  \"routes/index\": {\n    id: \"routes/index\",\n    parentId: \"root\",\n    path: undefined,\n    index: true,\n    caseSensitive: undefined,\n    module: route1\n  }\n};", "import * as React from \"react\";\nexport { React };\n", "import { renderToString } from \"react-dom/server\";\nimport { RemixServer } from \"remix\";\nimport type { EntryContext } from \"remix\";\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  const markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />\n  );\n\n  responseHeaders.set(\"Content-Type\", \"text/html\");\n\n  return new Response(\"<!DOCTYPE html>\" + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  });\n}\n", "import * as React from \"react\";\n\nimport { Links, LiveReload, Meta, Outlet, Scripts } from \"remix\";\nimport type { LinksFunction } from \"remix\";\n\nimport styles from \"./styles/index.css\";\n\n/**\n * The `links` export is a function that returns an array of objects that map to\n * the attributes for an HTML `<link>` element. These will load `<link>` tags on\n * every route in the app, but individual routes can include their own links\n * that are automatically unloaded when a user navigates away from the route.\n *\n * https://remix.run/api/app#links\n */\nexport const links: LinksFunction = () => {\n  return [{ rel: \"stylesheet\", href: styles }];\n};\n\n/**\n * The root module's default export is a component that renders the current\n * route via the `<Outlet />` component. Think of this as the global layout\n * component for your app.\n */\nconst App = () => {\n  return (\n    <Document>\n      <Outlet />\n    </Document>\n  );\n};\n\nconst Document = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n        <link rel=\"icon\" href=\"/favicon.png\" type=\"image/png\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <Scripts />\n        {process.env.NODE_ENV === \"development\" && <LiveReload />}\n      </body>\n    </html>\n  );\n};\n\nexport default App;\n", "import React from \"react\";\n\nimport type { HeadersFunction } from \"remix\";\n\nimport sounds from \"../../sounds\";\nimport JukeBox from \"../components/JukeBox\";\nimport SoundButton from \"../components/SoundButton\";\n\nexport const headers: HeadersFunction = () => {\n  return {\n    \"Cache-Control\": \"s-maxage=1, stale-while-revalidate=59\",\n  };\n};\n\nconst Index = () => {\n  return (\n    <div className=\"h-screen w-screen flex flex-col\">\n      <JukeBox />\n\n      <div className=\"md:absolute top-[162px] md:left-9 overflow-scroll\">\n        <h1 className=\"hidden md:block text-5xl mb-7 font-bold\">\n          TourRadar Jukebox\n        </h1>\n        <div className=\"grid md:w-[747px] grid-cols-1 md:grid-cols-3 gap-3 md:bg-transparent p-3 bg-teal-10\">\n          {sounds.map((group) => {\n            const label = group.message;\n\n            return group.files.map(({ name, file }) => (\n              <SoundButton\n                label={label}\n                key={name}\n                soundName={file}\n                image={group.image}\n              >\n                {name}\n              </SoundButton>\n            ));\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n", "interface File {\n  name: string;\n  file: string;\n}\n\nconst sort = (input: File[]) =>\n  input.sort((a, b) => (a.name < b.name ? -1 : 1));\n\nconst sounds = [\n  {\n    message: \"NEW sounds\",\n    files: sort([\n      {\n        name: \"Ai jai jaiii\",\n        file: \"./sounds/ai_jai_jai.mp3\",\n      },\n      {\n        name: \"Alrightiiii\",\n        file: \"./sounds/alrightiiiii.mp3\",\n      },\n      {\n        name: \"Tsch\u00FCss Baba Servus Pfirti\",\n        file: \"./sounds/tschuss_baba_servus_pfirti.mp3\",\n      },\n    ]),\n  },\n  {\n    message: \"Baiii's\",\n    files: [\n      {\n        name: \"Jen\",\n        file: \"./sounds/baiii.mp3\",\n      },\n      {\n        name: \"Davincho\",\n        file: \"./sounds/baaaaiiii.mp3\",\n      },\n    ],\n  },\n  {\n    message: \"4 ever \u2764\uFE0F \",\n    image: \"niki\",\n    files: sort([\n      { name: \"Merning\", file: \"./sounds/merning.mp3\" },\n      { name: \"After Merning\", file: \"./sounds/after-merning.mp3\" },\n    ]),\n  },\n\n  {\n    message: \"TourRadar random noises\",\n    files: sort([\n      {\n        name: \"Dog\",\n        file: \"./sounds/dog.mp3\",\n      },\n      {\n        name: \"Elephant\",\n        file: \"./sounds/elephant.mp3\",\n      },\n      {\n        name: \"Sheep\",\n        file: \"./sounds/sheep.mp3\",\n      },\n    ]),\n  },\n  {\n    message: \"in memoriam Alexis \uD83D\uDE22\",\n    files: sort([\n      {\n        name: \"Duck\",\n        file: \"/sounds/duck.mp3\",\n      },\n      {\n        name: \"Final countdown\",\n        file: \"./sounds/final_countdown.mp3\",\n      },\n      {\n        name: \"Frog\",\n        file: \"./sounds/frog.mp3\",\n      },\n      {\n        name: \"Frog #2\",\n        file: \"./sounds/frog_2.mp3\",\n      },\n      {\n        name: \"Trumpet\",\n        file: \"./sounds/trompet.mp3\",\n      },\n      {\n        name: \"Trumpet #2\",\n        file: \"./sounds/trompet_2.mp3\",\n      },\n      {\n        name: \"Owl\",\n        file: \"./sounds/owl.mp3\",\n      },\n    ]),\n  },\n];\n\nexport default sounds;\n", "import React from \"react\";\n\nimport jukeBox from \"./jb.png\";\nimport mobileJukeBox from \"./mobile-jb.png\";\n\nconst Jukebox = () => {\n  return (\n    <div className=\"bg-container\">\n      <img className=\"md:hidden\" src={mobileJukeBox} />\n      <img\n        className=\"absolute right-0 top-3 h-screen hidden md:block\"\n        src={jukeBox}\n      />\n    </div>\n  );\n};\n\nexport default Jukebox;\n", "import React, { FC, useState } from \"react\";\n\nimport Sound from \"react-sound\";\n\nimport niki from \"./niki.png\";\n\nconst IMAGE_MAP = {\n  niki,\n};\n\nconst SoundButton: FC<{\n  soundName: string;\n  label: string;\n  image?: string;\n}> = ({ children, soundName, label, image }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [, setIsLoading] = useState(false);\n\n  const resolvedImg = IMAGE_MAP[image];\n\n  return (\n    <>\n      <button\n        className={`bg-white-100 shadow-grey-8 rounded-3xl p-1 h-[48px] ${\n          isPlaying ? \"animate-spin\" : \"\"\n        }`}\n        onClick={() => {\n          setIsPlaying(true);\n        }}\n      >\n        <div className=\"uppercase text-xs h-[15px]\">\n          {resolvedImg ? (\n            <img className=\"inline-block h-full\" src={resolvedImg.src} />\n          ) : null}\n          {label}\n        </div>\n        <div>{children}</div>\n      </button>\n      <Sound\n        url={soundName}\n        onLoading={() => setIsLoading(true)}\n        onLoad={() => setIsLoading(false)}\n        onStop={() => setIsPlaying(false)}\n        onError={() => setIsPlaying(false)}\n        onFinishedPlaying={() => {\n          setIsPlaying(false);\n          setIsLoading(false);\n        }}\n        playStatus={isPlaying ? Sound.status.PLAYING : Sound.status.STOPPED}\n      />\n    </>\n  );\n};\n\nexport default SoundButton;\n"],
  "mappings": "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",
  "names": []
}
